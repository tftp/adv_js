Объекты нужны, чтобы связанные данные держать в одном месте.
Создание объектов:
  - через литерал {}
    test = {}

  - функция конструктор
  - встроенный конструктор Object, почти что литерал,
    test = Object(1)
    на практике нет смысла

  - Object.create, если хотим задать прототип или какоето сложное поведение свойств
  - через классы

Создание через Object.create.
  Object.create(proto [, propetiesObject ])

  propetiesObject - свойство объекта можно добавить или удалить в любой момент, когда угодно. Но можно сделать так, что этого
    нельзя будет сделать если использовать freeze для объекта.
  Удалить свойство: delete object.property

  Каждое свойство в объекте - не просто ключ значение, но мы сожем добавлять дополнительные флаги, дополнительное поведение.
  Это называется дискриптором.
  Дискрипторов существует много, но большинство не используется.
  Самые часто используемые дискрипторы:
    get/set      - получают/задают данные объекта
    writable     - разрешают/запрещают присваивание
    configurable - разрешают/запрещают удаление свойств

  подробнее про дискрипторы https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty

  пример создания объекта со свойством currentTime имеющего get/set:

    var clock = Object.create(null, {
      currentTime: {
        set: function(value){
            [this.hours, this.minutes, this.secunds] = value.split(':');
        },
        get: function(){
            return [this.hours, this.minutes, this.secunds].join('--');
        };
      };
    })

  Дескрипторы данных могут иметь ключ value, которое определяет значение этого свойства.
  Дескрипторы доступа имеют get/set и не имеют value.
  Дескрипторы применяются редко, обычно используются в классах.

  Прототипы.
    Служат для наследования методов и свойств от "родительских" объектов.
    "Родительские" объекты - это не те объекты, которые рождают дочерние, а это те объекты, которые могут
      передать свои свойства кому-то, назначеным для этого объектам наследования.

    При поиске у объекта того или иного свойства, поиск происходит сначала у текущего объекта, затем в его прототипе,
      затем в прототипе прототипа и т.д. Если свойство не найдено, возвращает undefined.

    Коренным прототипом для всех объектов является Object.

    Чтобы узнать прототип объекта есть два метода:
      - __proto__ - устарел, но иногда используется (myObject.__proto__);
      - Object.getPrototypeOf(myObject).

    Можно добавить новое свойство в прототип:
      Array.prototype.lengthOutput = function(){
        return this.length * 10;
      };

    Как можно задать прототип:
      Нужный прототип можно записать любому объекту через myObject.__proto__ = objectPrototype

      Создание множества объектов возможно через функцию конструктора.
        Она может в каждый созданный объект записать нужный прототип с помощью своего свойства prototype.

      Можно задать прототип через метод setPrototypeOf.
      А также у конструктора есть параметр задания прототипа: BatleShip.prototype = new Ship();

      Вот некоторые операторы при работе с протатипами:
        my_object instanceof Object  - определяет присутствует ли Object в цепочке прототипов my_object.
