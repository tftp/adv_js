Работа с сетью.
  XMLHttpRequest
     - Старый
     - Работает на колбэках
     - Мощный
     - Сложный синтаксис

     Сначала создается новый объект, который обычно называется xhr:

      xhr = new XMLHttpRequest();

    Далее можно указать с каким сервером и по какому методу установить сеанс связи:

      xhr.open('GET', `https://api.giphy.com/v1/gifs/search?q=cat&api_key=${API_KEY}`);

    Далее нужно отправить запрос:

      xhr.send()

    В ответе мы получим некоторый объект, включающий в себя методы для обработки ответа и ответ в виде данных.

    Для обработки ответа, используем следующие методы:

      xhr.onload = function(){
        console.log(xhr.response) //в данном случае ответ придет в JSON формате, неудобном
        console.log(JSON.parse(xhr.response)) //используем JSON обработчик
      }

    Для обработки ошибок:

      if (xhr.status !== 200) {
        console.log('Something wrong!', xhr.status)
        return;
      }
    или создать отдельный обработчик ошибки:

      xhr.onerror = function(){
        console.log('Error!', xhr.status)
      }

    Добавление заголовков к нашему запросу:

      xhr.setRequestHeader(name: 'test', value: '123')

      в данном случае в заголовке запроса у нас появится новый параметр test: 123

      если послать два заголовка с одинаковым name

        xhr.setRequestHeader(name: 'test', value: '321')
        xhr.setRequestHeader(name: 'test', value: '123')

      то параметр не перезапишется а добавится: test: 321, 123

    Работа с XHR оборачивается в колбэки или прмисы
      Пример колбэк обертки:

        const getGifs = ({query, onSuccess, onError}) => {   //onSuccess и onError - колбэки
          let xhr = new XMLHttpRequest();
          xhr.open('GET', `https://api.giphy.com/v1/gifs/search?q=${query}&api_key=${API_KEY}`);
          xhr.onload = function(){
            if (xhr.status !== 200) {
              onError(xhr.status)
              return;
            }
            onSuccess(JSON.parse(xhr.response))
          }
        }

        Далее запускаем

        getGifs({
            query: 'cat',
            onSuccess: (value) => {
              console.log(value)
            },
            onError: (err) => {
              console.log(err)
            }
        })

      Пример использование промисов:

        const getGifs = (query) => {   //onSuccess и onError - колбэки
          return new Promise((resolve, reject) => {
            let xhr = new XMLHttpRequest();
            xhr.open('GET', `https://api.giphy.com/v1/gifs/search?q=${query}&api_key=${API_KEY}`);
            xhr.onload = function(){
              if (xhr.status !== 200) {
                reject(xhr.status)
                return;
              }
              resolve(JSON.parse(xhr.response))
            }
          })
        }

        Далее

        getGifs('cat').then((value) => {
          console.log(value)
          },
          (value) => {
          console.log(value)
          }
        )

        или используем catch

        Пример с вызовом ассинхронной функции:

          const someFunc = async () => {
            try {
              const result = await getGifs('dog')
              console.log(result)
            }catch(err){
              console.error(err)
            }
          }

  Использование fetch.
    -Работает на промисах
    -Проще и удобнее XHR
    -Пока не везде поддерживается

      const getGifs = query => {
        return fetch(`https://api.giphy.com/v1/gifs/search?q=${query}&api_key=${API_KEY}`);
      };

    Так как он возвращает промис то:

      getGifs('cat').then((value) => {
        console.log(value)
        },
        (value) => {
        console.log(value)
        }
      )

    Fetch возвращает более сложный объект, поэтому что бы получить что то более удобоваримое
      нужно пользоваться встроенными методами, один их них .json:

      return fetch(`https://api.giphy.com/v1/gifs/search?q=${query}&api_key=${API_KEY}`).then(result =>
          return result.json()  //здесь результатом тоже будет промис
      )

      и обработка ошибок тоже чуть изменится

        return fetch(`https://api.giphy.com/v1/gifs/search?q=${query}&api_key=${API_KEY}`).then(result =>
          if(result.ok){
            return result.json()
          }
          throw new Error('Something wrong!')
        )

    У Fetch есть дополнительный параметр, который передается как объект, в нем мы можем указать метод связи (GET по
      умолчанию), заголовки, тело запроса.

  Безопасность.
    1. Политика Some Origin Policy - при переходе от страницы к странице origin должен быть одинаков,
      origin - это совокупность протокола, адреса, порта.
    2. CORS - набор заголовков которые можно выставить на сервере и указать с каких доменов можно принимать запрос.
      Сервер устанавливает параметр access-control-allow-origin: * в котором прописывает политику безопасности.

  Кэширование.
  Отмена запросов.
    Для отмены запросов можно использовать замыкание. Создается переменная let hiddenXHR, которую мы и обрабатываем:

    const GifsFactory = () => {
      let hiddenXHR;
      return value => {
        if (hiddenXHR){
          hiddenXHR.abort()  //если уже был то отмена запроса
        }
        return new Promise((resolve, reject) => {
          let xhr = new XMLHttpRequest();
          hiddenXHR = xhr; //замыкание на xhr
          xhr.open('GET', `https://api.giphy.com/v1/gifs/search?q=${query}&api_key=${API_KEY}`);
          xhr.onload = function(){
            if (xhr.status !== 200) {
              reject(xhr.status)
              return;
            }
            resolve(JSON.parse(xhr.response))
          };
          xhr.send();
        });
      };
    };

    const getGifs = GifsFactory();
    const someFunc = async (query) => {
      try {
        const result = await getGifs(query)
        console.log(result)
      }catch(err){
        console.error(err)
      };
    };

    Троттлинг функции означает, что функция вызывается не более одного раза в указанный период времени
     (например, раз в 10 секунд). Другими словами ― троттлинг предотвращает запуск функции, если она уже
     запускалась недавно. Троттлинг также обеспечивает регулярность выполнение функции с заданной периодичностью.
    Debouncing функции означает, что все вызовы будут игнорироваться до тех пор, пока они не прекратятся
     на определённый период времени. Только после этого функция будет вызвана.
     Например, если мы установим таймер на 2 секунды, а функция вызывается 10 раз с интервалом в одну
     секунду, то фактический вызов произойдёт только спустя 2 секунды после
     крайнего (десятого) обращения к функции.
     см. https://medium.com/nuances-of-programming/%D1%87%D1%82%D0%BE-%D1%82%D0%B0%D0%BA%D0%BE%D0%B5-throttling-%D0%B8-debouncing-4f0a839769ef
